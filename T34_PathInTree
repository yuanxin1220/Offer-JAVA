package offer;
import java.util.*;
//二叉树中和为某一值的路径
public class T34_PathInTree {
	public void FindPath(BinaryTreeNode pRoot,int expectedSum,Vector<BinaryTreeNode> path,int currentSum)
	{
		currentSum+=pRoot.m_dValue;
		path.add(pRoot);
		
		//如果是叶子结点，且路径上结点和对于输入的值
		//打印出这条路径
		boolean isLeaf=(pRoot.m_pLeft==null && pRoot.m_pRight==null);
		if(isLeaf==true && currentSum==expectedSum)
		{
			for (int i=0;i<path.size();++i)			
				System.out.print(path.get(i).m_dValue+" ");
			System.out.println();
		}
		
		//如果不是叶子结点，则遍历它的子节点
		if(isLeaf==false)
		{
			if(pRoot.m_pLeft!=null)
				FindPath(pRoot.m_pLeft,expectedSum,path,currentSum);
			if(pRoot.m_pRight!=null)
				FindPath(pRoot.m_pRight,expectedSum,path,currentSum);
		}
		
		//在返回到父节点之前，在路径上删除当前结点
		//并在currentSum中减去当前结点的值
		currentSum-=path.get(path.size()-1).m_dValue;
		path.remove(path.size()-1);
	}
	
	public void FindPath(BinaryTreeNode pRoot,int expectedSum)
	{
		if(pRoot==null)
			return;
		Vector<BinaryTreeNode> path=new Vector<BinaryTreeNode>();
		int currentSum=0;
		FindPath(pRoot,expectedSum,path,currentSum);		
	}
	
	// ====================测试代码====================
	public void ConnectTreeNodes(BinaryTreeNode pParent,BinaryTreeNode pLeft,BinaryTreeNode pRight)
	{
		if(pParent!=null)
		{
			pParent.m_pLeft=pLeft;
			pParent.m_pRight=pRight;			
		}
	}
	public void Test(String testName, BinaryTreeNode pRoot,int expectedSum)
	{
		if(testName!=null)
			System.out.println(testName);
		FindPath(pRoot,expectedSum);		
	}
	
	//     10
	//    /  \
	//   5    12
	//  /\        
	// 4  7    
	//二叉树中有多条符合要求的路径
	public void Test1()
	{
		BinaryTreeNode pNode10=new BinaryTreeNode(10);
		BinaryTreeNode pNode5=new BinaryTreeNode(5);
		BinaryTreeNode pNode12=new BinaryTreeNode(12);
		BinaryTreeNode pNode4=new BinaryTreeNode(4);
		BinaryTreeNode pNode7=new BinaryTreeNode(7);
		
		ConnectTreeNodes(pNode10,pNode5,pNode12);
		ConnectTreeNodes(pNode5,pNode4,pNode7);
		Test("Test1",pNode10,22);
	}
	
	//二叉树中没有符合要求的路径
	public void Test2()
	{
		BinaryTreeNode pNode10=new BinaryTreeNode(10);
		BinaryTreeNode pNode5=new BinaryTreeNode(5);
		BinaryTreeNode pNode12=new BinaryTreeNode(12);
		BinaryTreeNode pNode4=new BinaryTreeNode(4);
		BinaryTreeNode pNode7=new BinaryTreeNode(7);
		
		ConnectTreeNodes(pNode10,pNode5,pNode12);
		ConnectTreeNodes(pNode5,pNode4,pNode7);
		Test("Test2",pNode10,15);
	}
	
	//  	  5
	//		4
	//	  3
	//	2
	//1
	//二叉树有一条符合要求的路径
	public void Test3()
	{
		BinaryTreeNode pNode5=new BinaryTreeNode(5);
		BinaryTreeNode pNode4=new BinaryTreeNode(4);
		BinaryTreeNode pNode3=new BinaryTreeNode(3);
		BinaryTreeNode pNode2=new BinaryTreeNode(2);
		BinaryTreeNode pNode1=new BinaryTreeNode(1);
		ConnectTreeNodes(pNode5,pNode4,null);
		ConnectTreeNodes(pNode4,pNode3,null);
		ConnectTreeNodes(pNode3,pNode2,null);
		ConnectTreeNodes(pNode2,pNode1,null);
		Test("Test3",pNode5,15);
	}
	
	//二叉树根结点的指针为空指针
	public void Test4()
	{
		Test("Test4", null, 0);
	}
	
	public static void main(String[] args)
	{
		T34_PathInTree main=new T34_PathInTree();
		main.Test1();
		main.Test2();
		main.Test3();
		main.Test4();
	}
}
