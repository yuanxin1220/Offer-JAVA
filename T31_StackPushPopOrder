package offer;
import java.util.*;

public class T31_StackPushPopOrder {
	public boolean IsPopOrder_Array(int[] pPush,int[] pPop)
	{		
		if(pPush.length==0 || pPop.length==0)
			return false;
		if(pPush.length!=pPop.length)
			return false;
		Stack<Integer> stack=new Stack<Integer>();
		int j=0;
		for(int i=0;i<pPush.length;i++)
		{
			//若下一个弹出的数字不在栈顶
			//把压栈序列中还未入栈的数字压入辅助栈
			stack.push(pPush[i]);
			// 若下一个弹出的数字刚好是栈顶数字，则直接弹出
			while((!stack.empty()) && (stack.peek()==pPop[j]))
			{
				stack.pop();
				j++;
			}
		}
		if(stack.empty())
			return true;
		else
			return false;
	}
	
	public boolean IsPopOrder_Stack(Stack<Integer> pPush,Stack<Integer> pPop)
	{
		if(pPush.size()!=pPop.size())
			return false;
		Stack<Integer> stack=new Stack<Integer>();
		while(!pPush.empty())
		{
			//若下一个弹出的数字不在栈顶
			//把压栈序列中还未入栈的数字压入辅助栈
			stack.push(pPush.pop());
			//若下一个弹出的数字刚好是栈顶数字，则直接弹出
			while((!stack.empty()) && (stack.peek()==pPop.peek()))
			{
				stack.pop();
				pPop.pop();
			}			
		}		
		if(stack.empty())
			return false;
		else 
			return true;		
	}
	
	public static void main(String[] args)
	{
		T31_StackPushPopOrder main=new T31_StackPushPopOrder();
		int[] pPush1= {1,2,3,4,5};
		int[] pPop1= {4,5,3,2,1};
		System.out.println(main.IsPopOrder_Array(pPush1, pPop1));

		Stack<Integer> pPush2=new Stack<Integer>();
		pPush2.push(1);
		pPush2.push(2);
		pPush2.push(3);
		pPush2.push(4);
		pPush2.push(5);
		Stack<Integer> pPop2=new Stack<Integer>();
		pPop2.push(4);
		pPop2.push(5);
		pPop2.push(3);
		pPop2.push(2);
		pPop2.push(1);
		System.out.println(main.IsPopOrder_Stack(pPush2, pPop2));
	}
}
