package offer;

public class T54_KthNodeInBST {
	public BinaryTreeNode KthNode(BinaryTreeNode pRoot,int k_num)
	{
		if(pRoot==null || k_num==0)
			return null;
		int[] k= new int[1];
		k[0]=k_num;
		return KthNodeCore(pRoot,k);
	}
	public BinaryTreeNode KthNodeCore(BinaryTreeNode pRoot,int[] k)
	{
		BinaryTreeNode target=null;
		if(pRoot.m_pLeft!=null)
			target=KthNodeCore(pRoot.m_pLeft,k);
		if(target==null)
		{
			if(k[0]==1)
				target=pRoot;
			k[0]--;
		}
		if(target==null && pRoot.m_pRight!=null)
			target=KthNodeCore(pRoot.m_pRight,k);
		return target;
	}
	
	//============测试==============
	public void Test(String testName,BinaryTreeNode pRoot,int k,boolean isNull,int expected)
	{
		if(testName!=null)
			System.out.print(testName);
		BinaryTreeNode pTarget=KthNode(pRoot,k);
		if((isNull && pTarget==null)||(!isNull && pTarget.m_dValue==expected))
			System.out.println(" passed");
		else
			System.out.println(" failed");
	}
	//满二叉树

	//  8
	//6      10
	//5 7    9  11
	public void TestA()
	{
		BinaryTreeNode pNode8 = new BinaryTreeNode(8);
	    BinaryTreeNode pNode6 = new BinaryTreeNode(6);
	    BinaryTreeNode pNode10 = new BinaryTreeNode(10);
	    BinaryTreeNode pNode5 = new BinaryTreeNode(5);
	    BinaryTreeNode pNode7 = new BinaryTreeNode(7);
	    BinaryTreeNode pNode9 = new BinaryTreeNode(9);
	    BinaryTreeNode pNode11 = new BinaryTreeNode(11);
	    
	    pNode8.ConnectTreeNodes(pNode6, pNode10);
	    pNode6.ConnectTreeNodes(pNode5, pNode7);
	    pNode10.ConnectTreeNodes(pNode9, pNode11);
	    
	    Test("TestA0", pNode8, 0, true, -1);
	    Test("TestA1", pNode8, 1, false, 5);
	    Test("TestA2", pNode8, 2, false, 6);
	    Test("TestA3", pNode8, 3, false, 7);
	    Test("TestA4", pNode8, 4, false, 8);
	    Test("TestA5", pNode8, 5, false, 9);
	    Test("TestA6", pNode8, 6, false, 10);
	    Test("TestA7", pNode8, 7, false, 11);
	    Test("TestA8", pNode8, 8, true, -1);
	}
	
	//  	5
	//	   4
	//	  3
	//	 2
	//  1
	public void TestB()
	{
		BinaryTreeNode pNode5 = new BinaryTreeNode(5);
	    BinaryTreeNode pNode4 = new BinaryTreeNode(4);
	    BinaryTreeNode pNode3 = new BinaryTreeNode(3);
	    BinaryTreeNode pNode2 = new BinaryTreeNode(2);
	    BinaryTreeNode pNode1 = new BinaryTreeNode(1);
	    
	    pNode5.ConnectTreeNodes(pNode4, null);
	    pNode4.ConnectTreeNodes(pNode3, null);
	    pNode3.ConnectTreeNodes(pNode2, null);
	    pNode2.ConnectTreeNodes(pNode1, null);
	    
	    Test("TestA0", pNode5, 0, true, -1);
	    Test("TestA1", pNode5, 1, false, 1);
	    Test("TestA2", pNode5, 2, false, 2);
	    Test("TestA3", pNode5, 3, false, 3);
	    Test("TestA4", pNode5, 4, false, 4);
	    Test("TestA5", pNode5, 5, false, 5);
	    Test("TestA6", pNode5, 6, true, -1);
	}

	// 1
	//   2
	//     3
	//       4
	//         5
	public void TestC()
	{
		BinaryTreeNode pNode5 = new BinaryTreeNode(5);
	    BinaryTreeNode pNode4 = new BinaryTreeNode(4);
	    BinaryTreeNode pNode3 = new BinaryTreeNode(3);
	    BinaryTreeNode pNode2 = new BinaryTreeNode(2);
	    BinaryTreeNode pNode1 = new BinaryTreeNode(1);
	    
	    pNode1.ConnectTreeNodes(null,pNode2 );
	    pNode2.ConnectTreeNodes(null,pNode3);
	    pNode3.ConnectTreeNodes(null,pNode4);
	    pNode4.ConnectTreeNodes(null,pNode5);
	    
	    Test("TestA0", pNode1, 0, true, -1);
	    Test("TestA1", pNode1, 1, false, 1);
	    Test("TestA2", pNode1, 2, false, 2);
	    Test("TestA3", pNode1, 3, false, 3);
	    Test("TestA4", pNode1, 4, false, 4);
	    Test("TestA5", pNode1, 5, false, 5);
	    Test("TestA6", pNode1, 6, true, -1);
	}
	
	public static void main(String[] args)
	{
		T54_KthNodeInBST main=new T54_KthNodeInBST();
		//main.TestA();
		//main.TestB();
		main.TestC();
	}
}
