package offer;

public class T25_MergeSortedLists {
	public ListNode Merge(ListNode pHead1,ListNode pHead2)
	{
		//第一个链表为空，返回第二个链表
		if (pHead1==null)
			return pHead2;
		
		//第二个链表为空，返回第一个链表
		if(pHead2==null)
			return pHead1;
		
		//得到两个链表中较小的头节点，并链接到已经合并的链表
		//剩余两个链表依然是排序的，递归合并
		ListNode pMergedHead=null;
		if(pHead1.m_nValue<pHead2.m_nValue)
		{
			pMergedHead=pHead1;
			pMergedHead.m_pNext=Merge(pHead1.m_pNext,pHead2);
		}
		else
		{
			pMergedHead=pHead2;
			pMergedHead.m_pNext=Merge(pHead1,pHead2.m_pNext);
		}
		return pMergedHead;
	}
	
	public void PrintList(ListNode pHead)
	{
		ListNode pRead=pHead;
		while(pRead!=null)
		{
			System.out.print(pRead.m_nValue+" ");
			pRead=pRead.m_pNext;
		}
		System.out.println();
	}
	
	// =============== 测试代码 ===============
	public void Test(ListNode pHead1,ListNode pHead2)
	{
		System.out.println("The first list is: ");
		PrintList(pHead1);

		System.out.println("The second list is: ");
		PrintList(pHead2);
		
		System.out.println("The merged list is: ");
		ListNode pMergedHead = Merge(pHead1,pHead2);
		PrintList(pMergedHead);
	}
	
	//输入的两个链表有多个节点，节点值互不相同
	public void Test1()
	{
		System.out.println("===== Test1 starts: =====");

		ListNode pNode1=new ListNode(1);
		ListNode pNode3=new ListNode(3);
		ListNode pNode5=new ListNode(5);

		pNode1.m_pNext=pNode3;
		pNode3.m_pNext=pNode5;
		
		ListNode pNode2=new ListNode(2);
		ListNode pNode4=new ListNode(4);
		ListNode pNode6=new ListNode(6);

		pNode2.m_pNext=pNode4;
		pNode4.m_pNext=pNode6;
		
		Test(pNode1,pNode2);
	}
	
	//输入的两个链表有多个节点，存在等值节点
	public void Test2()
	{
		System.out.println("===== Test2 starts: =====");

		ListNode pNode1=new ListNode(1);
		ListNode pNode3=new ListNode(3);
		ListNode pNode5=new ListNode(5);

		pNode1.m_pNext=pNode3;
		pNode3.m_pNext=pNode5;
		
		ListNode pNode2=new ListNode(1);
		ListNode pNode4=new ListNode(3);
		ListNode pNode6=new ListNode(5);

		pNode2.m_pNext=pNode4;
		pNode4.m_pNext=pNode6;
		
		Test(pNode1,pNode2);
		
	}
	
	//两个链表都只有一个数字
	public void Test3()
	{
		System.out.println("===== Test3 starts: =====");
		
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(2);
		
		Test(pNode1,pNode2);
	}
	
	//两个空链表
	public void Test4()
	{
		System.out.println("===== Test4 starts: =====");
		
		ListNode pNode1=null;
		ListNode pNode2=null;
		
		Test(pNode1,pNode2);
	}
	
	public static void main(String[] args)
	{
		T25_MergeSortedLists main=new T25_MergeSortedLists();
		//main.Test1();
		//main.Test2();
		//main.Test3();
		main.Test4();
	}
}
