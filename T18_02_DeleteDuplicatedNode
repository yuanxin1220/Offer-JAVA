package offer;

public class T18_02_DeleteDuplicatedNode {
	public ListNode DeleteDuplication(ListNode pHead)
	{
		if(pHead==null)
			return null;

		ListNode pPreNode=null;
		ListNode pNode=pHead;
		while(pNode!=null)
		{
			ListNode pNext=pNode.m_pNext;
			boolean needDelete=false;
			if(pNext!=null && pNext.m_nValue==pNode.m_nValue)
				needDelete=true;
			
			if(!needDelete)	//当前结点pNode与下一节点pNext不同
			{
				pPreNode=pNode;	//更新当前结点的前一个结点
				pNode=pNode.m_pNext;	//更新当前结点
			}
			else	//当前结点pNode与下一节点pNext相同，删除所有相同值的结点
			{
				int value=pNode.m_nValue;
				ListNode pToBeDel=pNode;
				while(pToBeDel!=null && pToBeDel.m_nValue==value)
				{
					pNext=pToBeDel.m_pNext;
					pToBeDel=null;
					pToBeDel=pNext;					
				}
				
				if(pPreNode==null)	//头结点被删除				
					pHead=pNext;
				else	//找到pPreNode后面第一个不重复的结点
					pPreNode.m_pNext=pNext;
				pNode=pNext;	//更新当前结点
			}				
		}
		return pHead;
	}
	
	// ==================== 测试代码 ====================
	public void Test(String testName,ListNode pHead,int[] expectedValues)
	{
		if(testName!=null)
			System.out.print(testName+" begins: ");
		
		ListNode pNewHead=DeleteDuplication(pHead);
		
		int index=0;
		int lenExpectedValues;
		ListNode pNode=pNewHead;
		
		if(pNode==null && expectedValues==null)
		{
			System.out.println("Passed.");
			return;
		}
		
		while(pNode!=null && index<expectedValues.length)	//核对链表每个节点的值
		{
			if(pNode.m_nValue!=expectedValues[index])
				break;
			pNode=pNode.m_pNext;
			index++;
		}
				
		if(pNode==null && index==expectedValues.length)
			System.out.println("Passed.");
		else
			System.out.println("Failed.");
	}
	
	//某些节点重复
	public void Test1()
	{
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(2);
		ListNode pNode3=new ListNode(3);
		ListNode pNode4=new ListNode(3);
		ListNode pNode5=new ListNode(4);
		ListNode pNode6=new ListNode(4);
		ListNode pNode7=new ListNode(5);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;
		pNode5.m_pNext=pNode6;
		pNode6.m_pNext=pNode7;
		
		int[] expectedValues= {1,2,5};
		Test("Test1",pNode1,expectedValues);
	}
	
	//没有重复的结点
	public void Test2()
	{
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(2);
		ListNode pNode3=new ListNode(3);
		ListNode pNode4=new ListNode(4);
		ListNode pNode5=new ListNode(5);
		ListNode pNode6=new ListNode(6);
		ListNode pNode7=new ListNode(7);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;	
		pNode5.m_pNext=pNode6;
		pNode6.m_pNext=pNode7;	
		
		int expectedValues[]= {1,2,3,4,5,6,7};
		Test("Test2",pNode1,expectedValues);
	}
	
	//除了一个结点之外其他所有结点的值都相同
	public void Test3()
	{
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(1);
		ListNode pNode3=new ListNode(1);
		ListNode pNode4=new ListNode(1);
		ListNode pNode5=new ListNode(1);
		ListNode pNode6=new ListNode(1);
		ListNode pNode7=new ListNode(2);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;	
		pNode5.m_pNext=pNode6;
		pNode6.m_pNext=pNode7;	
		
		int expectedValues[]= {2};
		Test("Test3",pNode1,expectedValues);	
	}
	
	//所有结点的值都相同
	public void Test4()
	{
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(1);
		ListNode pNode3=new ListNode(1);
		ListNode pNode4=new ListNode(1);
		ListNode pNode5=new ListNode(1);
		ListNode pNode6=new ListNode(1);
		ListNode pNode7=new ListNode(1);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;	
		pNode5.m_pNext=pNode6;
		pNode6.m_pNext=pNode7;	
		
		Test("Test4",pNode1,null);	
	}
	
	//所有结点成对出现
	public void Test5()
	{
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(1);
		ListNode pNode3=new ListNode(2);
		ListNode pNode4=new ListNode(2);
		ListNode pNode5=new ListNode(3);
		ListNode pNode6=new ListNode(3);
		ListNode pNode7=new ListNode(4);
		ListNode pNode8=new ListNode(4);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;	
		pNode5.m_pNext=pNode6;
		pNode6.m_pNext=pNode7;	
		pNode7.m_pNext=pNode8;	
		
		Test("Test5",pNode1,null);	
	}
	
	//结点中只有一个结点
	public void Test6()
	{
		ListNode pNode1=new ListNode(1);

		int expectedValues[]= {1};
		Test("Test6",pNode1,expectedValues);	
	}
	
	//空链表
	public void Test7()
	{
		ListNode pNode1=null;
		Test("Test7",pNode1,null);	
	}
	
	public static void main(String[] args)
	{
		T18_02_DeleteDuplicatedNode main=new T18_02_DeleteDuplicatedNode();
		main.Test1();
		main.Test2();
		main.Test3();
		main.Test4();
		main.Test5();
		main.Test6();
		main.Test7();
	}
}
