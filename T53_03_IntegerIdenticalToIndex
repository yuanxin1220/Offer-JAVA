package offer;

public class T53_03_IntegerIdenticalToIndex {
	public int GetNumberSameAsIndex(int[] numbers,int length)
	{
		if(numbers==null || length<=0)
			return -1;
		
		int left=0,right=length-1;
		while(left<=right)
		{
			int middle=(left+right)>>1;
			if(numbers[middle]==middle)
				return middle;
			else if(numbers[middle]<middle)
				left=middle+1;
			else
				right=middle-1;
		}
		return -1;
	}
	
	public static void main(String[] args)
	{
		T53_03_IntegerIdenticalToIndex main=new T53_03_IntegerIdenticalToIndex();
		//===========功能测试===========
		//数组包含数值下标相等的元素
		int[] numbers1= {-3, -1, 1, 3, 5};
		System.out.println(main.GetNumberSameAsIndex(numbers1, numbers1.length));
		//数组不含数值下标相等的元素
		int[] numbers2= {-1, 0, 1, 2, 5};
		System.out.println(main.GetNumberSameAsIndex(numbers2, numbers2.length));
		
		//==========边界测试=============
		//数组仅一个数字
		int[] numbers3= {0};
		System.out.println(main.GetNumberSameAsIndex(numbers3, numbers3.length));
		//数值下标相等元素在数组开头
		int[] numbers4= { 0, 1, 3, 5, 6 };
		System.out.println(main.GetNumberSameAsIndex(numbers4, numbers4.length));
		//数值下标相等元素在数组结尾
		int[] numbers5= { -1, 0, 1, 2, 4 };
		System.out.println(main.GetNumberSameAsIndex(numbers5, numbers5.length));
		
		//============特殊输入测试===========
		//空指针
		System.out.println(main.GetNumberSameAsIndex(null, 0));
	}
}
