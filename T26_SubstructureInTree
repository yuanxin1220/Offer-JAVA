package offer;

class BinaryTreeNode
{
	public double m_dValue;
	public BinaryTreeNode m_pLeft;
	public BinaryTreeNode m_pRight;
	public BinaryTreeNode(double n)
	{
		this.m_dValue=n;
		this.m_pLeft=null;
		this.m_pRight=null;
	}
}
public class T26_SubstructureInTree {
	public boolean HasSubtree(BinaryTreeNode pRoot1, BinaryTreeNode pRoot2)
	{
		boolean result=false;
		
		if(pRoot1!=null && pRoot2!=null)
		{
			if(Equal(pRoot1.m_dValue,pRoot2.m_dValue))
				result=DoesTree1HaveTree2(pRoot1,pRoot2);
			if(!result)
				result=HasSubtree(pRoot1.m_pLeft,pRoot2);
			if(!result)
				result=HasSubtree(pRoot1.m_pRight,pRoot2);
		}
		return result;
	}
	
	public boolean DoesTree1HaveTree2(BinaryTreeNode pRoot1,BinaryTreeNode pRoot2)
	{
		if(pRoot2==null)
			return true;
		
		if(pRoot1==null)
			return false;
		
		if(!Equal(pRoot1.m_dValue,pRoot2.m_dValue))
			
			return false;
		
		return DoesTree1HaveTree2(pRoot1.m_pLeft,pRoot2.m_pLeft) &&
				DoesTree1HaveTree2(pRoot1.m_pRight,pRoot2.m_pRight);
	}
	
	public boolean Equal(double num1,double num2)
	{
		if(Math.abs(num2-num1)<0.0000001)
			return true;
		else return false;
	}
	
	//辅助测试代码
	public void ConnectTreeNodes(BinaryTreeNode pParent,BinaryTreeNode pLeft,BinaryTreeNode pRight)
	{
		if(pParent!=null)
		{			
			pParent.m_pLeft=pLeft;
			pParent.m_pRight=pRight;
		}
	}

	// =============== 测试代码 ===============
	public void Test(String testName,BinaryTreeNode pRoot1,BinaryTreeNode pRoot2,boolean expected)
	{
		if(HasSubtree(pRoot1,pRoot2)==expected)
			System.out.println(testName+" passed.");
		else
			System.out.println(testName+" failed.");
	}
	
	// 树中结点含有分叉，树B是树A的子结构
	//  		8               8
	//		  /    \           / \
	//		 8       7        9   2
	//	   /   \
	//	  9     2
	//	 / \
	//	4   7
	public void Test1()
	{
		BinaryTreeNode pNodeA1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA2=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA3=new BinaryTreeNode(7);
		BinaryTreeNode pNodeA4=new BinaryTreeNode(9);
		BinaryTreeNode pNodeA5=new BinaryTreeNode(2);
		BinaryTreeNode pNodeA6=new BinaryTreeNode(4);
		BinaryTreeNode pNodeA7=new BinaryTreeNode(7);
		ConnectTreeNodes(pNodeA1,pNodeA2,pNodeA3);
		ConnectTreeNodes(pNodeA2,pNodeA4,pNodeA5);
		ConnectTreeNodes(pNodeA4,pNodeA6,pNodeA7);
		

		BinaryTreeNode pNodeB1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeB2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeB3=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeB1,pNodeB2,pNodeB3);
		
		Test("Test1",pNodeA1,pNodeB1,true);
	}
	
	// 树中结点含有分叉，树B不是树A的子结构
	//  		8               8
	//		  /    \           / \
	//		 8       7        9   2
	//	   /   \
	//	  9     2
	//	 / \
	//	4   7
	public void Test2()
	{
		BinaryTreeNode pNodeA1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA2=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA3=new BinaryTreeNode(7);
		BinaryTreeNode pNodeA4=new BinaryTreeNode(9);
		BinaryTreeNode pNodeA5=new BinaryTreeNode(3);
		BinaryTreeNode pNodeA6=new BinaryTreeNode(4);
		BinaryTreeNode pNodeA7=new BinaryTreeNode(7);
		ConnectTreeNodes(pNodeA1,pNodeA2,pNodeA3);
		ConnectTreeNodes(pNodeA2,pNodeA4,pNodeA5);
		ConnectTreeNodes(pNodeA4,pNodeA6,pNodeA7);
		

		BinaryTreeNode pNodeB1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeB2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeB3=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeB1,pNodeB2,pNodeB3);
		
		Test("Test2",pNodeA1,pNodeB1,false);
	}
	
	// 树中结点只有左子结点，树B是树A的子结构
	//  	   8                  8
	//		  /                   / 
	//		 8                   9   
	//		/                    /
	//	   9                    2
	//	  /      
	//	 2        
	//	/
	// 5
	public void Test3()
	{
		BinaryTreeNode pNodeA1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA2=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA3=new BinaryTreeNode(9);
		BinaryTreeNode pNodeA4=new BinaryTreeNode(2);
		BinaryTreeNode pNodeA5=new BinaryTreeNode(5);
		ConnectTreeNodes(pNodeA1,pNodeA2,null);
		ConnectTreeNodes(pNodeA2,pNodeA3,null);
		ConnectTreeNodes(pNodeA3,pNodeA4,null);
		ConnectTreeNodes(pNodeA4,pNodeA5,null);
		

		BinaryTreeNode pNodeB1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeB2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeB3=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeB1,pNodeB2,null);
		ConnectTreeNodes(pNodeB2,pNodeB3,null);
		
		Test("Test3",pNodeA1,pNodeB1,true);		
	}
		
	// 树中结点只有右子结点，树B不是树A的子结构
	//  	   8                   8
	//		  /                    / 
	//		 8                    9   
	//		/                    /
	//	   9                    2
	//	  /      
	//	 2        
	//	/
	// 5
	public void Test4()
	{
		BinaryTreeNode pNodeA1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA2=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA3=new BinaryTreeNode(9);
		BinaryTreeNode pNodeA4=new BinaryTreeNode(2);
		BinaryTreeNode pNodeA5=new BinaryTreeNode(5);
		ConnectTreeNodes(pNodeA1,null,pNodeA2);
		ConnectTreeNodes(pNodeA2,null,pNodeA3);
		ConnectTreeNodes(pNodeA3,null,pNodeA4);
		ConnectTreeNodes(pNodeA4,null,pNodeA5);
		

		BinaryTreeNode pNodeB1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeB2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeB3=new BinaryTreeNode(3);
		BinaryTreeNode pNodeB4=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeB1,null,pNodeB2);
		ConnectTreeNodes(pNodeB2,pNodeB3,pNodeB4);
		
		Test("Test4",pNodeA1,pNodeB1,false);		
	}
	
	//树A为空
	public void Test5()
	{
		BinaryTreeNode pNodeB1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeB2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeB3=new BinaryTreeNode(3);
		BinaryTreeNode pNodeB4=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeB1,null,pNodeB2);
		ConnectTreeNodes(pNodeB2,pNodeB3,pNodeB4);
		
		Test("Test5",null,pNodeB1,false);
	}

	//树B为空
	public void Test6()
	{
		BinaryTreeNode pNodeA1=new BinaryTreeNode(8);
		BinaryTreeNode pNodeA2=new BinaryTreeNode(9);
		BinaryTreeNode pNodeA3=new BinaryTreeNode(3);
		BinaryTreeNode pNodeA4=new BinaryTreeNode(2);
		ConnectTreeNodes(pNodeA1,null,pNodeA2);
		ConnectTreeNodes(pNodeA2,pNodeA3,pNodeA4);
		
		Test("Test6",pNodeA1,null,false);
	}
	
	//树AB均为空
	public void Test7()
	{
		Test("Test7",null,null,false);
	}
	
	
	
	public static void main(String[] args)
	{
		T26_SubstructureInTree main=new T26_SubstructureInTree();
		main.Test1();
		main.Test2();
		main.Test3();
		main.Test4();
		main.Test5();
		main.Test6();
		main.Test7();
	}
	
}
