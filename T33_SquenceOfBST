package offer;
//二插搜索树的后序遍历
public class T33_SquenceOfBST {
	public boolean VerifySequenceOfBST(int[] sequence,int start,int end)
	{
		//检查输入参数
		if(sequence==null || end<start)
			return false;
					
		int root=sequence[end];//后序遍历的最后一个结点为根结点
		//二插搜索树中左子树的节点小于根结点
		int i=start;
		for(;i<end;++i)
		{
			if(sequence[i]>root)
				break;
		}
		
		//二叉搜索树中右子树的节点大于根结点
		int j=i;
		for(;j<end;++j)
		{
			if(sequence[j]<root)
				return false;
		}
		
		//判断左子树是不是二叉搜索树
		boolean leftVerify=true;
		if(i>start)
			leftVerify=VerifySequenceOfBST(sequence,start,i-1);
		
		//判断右子树是不是二插搜索树
		boolean rightVerify=true;
		if(i<end-1)
			rightVerify=VerifySequenceOfBST(sequence,i,end-1);
		return leftVerify && rightVerify;		
	}
	
	public static void main(String[] args)
	{
		T33_SquenceOfBST main=new T33_SquenceOfBST();
		//======== true ========
		int[] data1= {4,8,6,12,16,14,10};
		System.out.println(main.VerifySequenceOfBST(data1, 0, data1.length-1));
		int[] data2= {4, 6, 7, 5};
		System.out.println(main.VerifySequenceOfBST(data2, 0, data2.length-1));
		int[] data3= {1, 2, 3, 4, 5};
		System.out.println(main.VerifySequenceOfBST(data3, 0, data3.length-1));
		int[] data4= {5, 4, 3, 2, 1};
		System.out.println(main.VerifySequenceOfBST(data4, 0, data4.length-1));
		int[] data5= {5};
		System.out.println(main.VerifySequenceOfBST(data5, 0, data5.length-1));
		//======== false ========
		int[] data6= {7, 4, 6, 5};
		System.out.println(main.VerifySequenceOfBST(data6, 0, data6.length-1));
		int[] data7= {4, 6, 12, 8, 16, 14, 10};
		System.out.println(main.VerifySequenceOfBST(data7, 0, data7.length-1));
		int[] data8= null;
		System.out.println(main.VerifySequenceOfBST(data8, 0, -1));		
	}
}
