package offer;

public class T24_ReverseList {
	public ListNode ReverseList(ListNode pHead)
	{
		ListNode pReversedHead=null;
		ListNode pNode=pHead;
		ListNode pPrev=null;
		while(pNode!=null)
		{
			ListNode pNext=pNode.m_pNext;
			
			if(pNext==null)
				pReversedHead=pNode;
			
			pNode.m_pNext=pPrev;
			
			pPrev=pNode;
			pNode=pNext;
		}
		return pReversedHead;
	}
	
	public void PrintList(ListNode pHead)
	{
		ListNode pRead=pHead;
		while(pRead!=null)
		{
			System.out.print(pRead.m_nValue+" ");
			pRead=pRead.m_pNext;
		}
		System.out.println();
	}
	
	// =============== 测试代码 ===============
	public void Test(ListNode pHead)
	{
		System.out.println("The orginal list is: ");
		PrintList(pHead);

		System.out.println("The reversed list is: ");
		ListNode pReversedHead=ReverseList(pHead);
		PrintList(pReversedHead);		
	}
	
	//输入链表有多个结点
	public void Test1()
	{
		System.out.println("===== Test1 starts: =====");
		ListNode pNode1=new ListNode(1);
		ListNode pNode2=new ListNode(2);
		ListNode pNode3=new ListNode(3);
		ListNode pNode4=new ListNode(4);
		ListNode pNode5=new ListNode(5);

		pNode1.m_pNext=pNode2;
		pNode2.m_pNext=pNode3;
		pNode3.m_pNext=pNode4;
		pNode4.m_pNext=pNode5;
		
		Test(pNode1);		
	}
	
	//输入链表只有一个结点
	public void Test2()
	{
		System.out.println("===== Test2 starts: =====");
		ListNode pNode1=new ListNode(1);

		Test(pNode1);	
	}
	
	//输入空链表
	public void Test3()
	{
		System.out.println("===== Test3 starts: =====");
		Test(null);
	}

	public static void main(String[] args)
	{
		T24_ReverseList main=new T24_ReverseList();
		main.Test1();
		main.Test2();
		main.Test3();		
	}
}
